name: GitHub CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash -l {0}

env:
  PYTHONWARNINGS: ignore::UserWarning
  PYTHON_BASE_PKGS: >
      coverage xlrd codecov

jobs:
  pyomo-tests:
    name: ${{ matrix.TARGET }}/${{ matrix.python }}${{ matrix.NAME }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [2.7, 3.5, 3.6, 3.7, 3.8, pypy2, pypy3]
        include:
        - os: ubuntu-latest
          TARGET: linux
          PYENV: pip

        - os: macos-latest
          TARGET: osx
          PYENV: pip

        - os: windows-latest
          TARGET: win
          PYENV: conda
          PACKAGES: setuptools, coverage, nose, xlrd

        exclude:
        - {os: macos-latest, python: pypy2}
        - {os: macos-latest, python: pypy3}
        - {os: windows-latest, python: pypy2}
        - {os: windows-latest, python: pypy3}

    steps:
    - uses: actions/checkout@v2

    # Ideally we would cache the conda downloads; however, each cache is
    # over 850MB, and with 5 python versions, that would consume 4.2 of
    # the 5 GB GitHub allows.
    #
    #- name: Conda package cache
    #  uses: actions/cache@v1
    #  if: matrix.PYENV == 'conda'
    #  id: conda-cache
    #  with:
    #    path: cache/conda
    #    key: conda-v2-${{runner.os}}-${{matrix.python}}

    - name: Pip package cache
      uses: actions/cache@v1
      if: matrix.PYENV == 'pip'
      id: pip-cache
      with:
        path: cache/pip
        key: pip-v2-${{runner.os}}-${{matrix.python}}

    - name: Set up Python ${{ matrix.python }}
      if: matrix.PYENV == 'pip'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Set up Miniconda Python ${{ matrix.python }}
      if: matrix.PYENV == 'conda'
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python }}

    # GitHub actions is very fragile when it comes to setting up various
    # Python interpreters, expecially the setup-miniconda interface.
    # Per the setup-miniconda documentation, it is important to always
    # invoke bash as a login shell ('shell: bash -l {0}') so that the
    # conda environment is properly activated.  However, running within
    # a login shell appears to foul up the link to python from
    # setup-python.  Further, we have anecdotal evidence that
    # subprocesses invoked through $(python -c ...) and `python -c ...`
    # will not pick up the python activated by setup-python on OSX.
    #
    # Our solution is to define a PYTHON_EXE environment variable that
    # can be explicitly called within subprocess calls to reach the
    # correct interpreter.  Note that we must explicitly run in a *non*
    # login shell to set up the environment variable for the
    # setup-python environments.

    - name: Install Python Packages (pip)
      if: matrix.PYENV == 'pip'
      shell: bash
      run: |
        python -m pip install --cache-dir cache/pip --upgrade pip
        pip install --cache-dir cache/pip ${PYTHON_BASE_PKGS} 
        if [[ ${{matrix.python}} == pypy  ]] || [[ ${{matrix.python}} == 2.7 ]]; then
            pip install --cache-dir cache/pip pyro
        else
            pip install --cache-dir cache/pip pyro4
        fi
        if [[ ${{matrix.python}} == 3.4 ]]; then
            pip install --cache-dir cache/pip pyyaml<=5.2
        elif [[ ${{matrix.python}} != 3.6 ]]; then
            pip install --cache-dir cache/pip pyyaml
        fi
        python -c 'import sys; print("::set-env name=PYTHON_EXE::%s" \
            % (sys.executable,))'

    - name: Install Python packages (conda)
      if: matrix.PYENV == 'conda'
      run: |
        mkdir -p $GITHUB_WORKSPACE/cache/conda
        conda config --set always_yes yes
        conda config --set auto_update_conda false
        conda config --prepend pkgs_dirs $GITHUB_WORKSPACE/cache/conda
        conda info
        conda config --show-sources
        conda list --show-channel-urls
        conda install -q -y -c conda-forge ${{matrix.PACKAGES}}
        python -c 'import sys; print("::set-env name=PYTHON_EXE::%s" \
            % (sys.executable,))'

    - name: Install Pyutilib
      run: |
        python setup.py develop

    - name: Run Pyutilib tests
      run: |
        test.pyutilib --cat=all --cov -v

    - name: Process code coverage report
      env:
        CODECOV_NAME: ${{matrix.TARGET}}/${{matrix.python}}${{matrix.NAME}}
      run: |
        bash codecov.sh -Z -X gcov -f TEST-pyutilib.xml
